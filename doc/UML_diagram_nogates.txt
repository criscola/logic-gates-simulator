@startuml
interface Pin{
	+boolean getData()
	+void setData(boolean data)
	+CircuitComponent getAttachedTo()
	+void setAttachedTo(CircuitComponent attachedTo)
}
abstract class CircuitComponent{
	-LinkedList<Pin> inputs
	-LinkedList<Pin> outputs
	+CircuitComponent(LinkedList<Pin> inputs, LinkedList<Pin> outputs)
	+LinkedList<Pin> getInputs()
	+LinkedList<Pin> getOutputs()
	+void setInputs(LinkedList<Pin> inputs)
	+void setOutputs(LinkedList<Pin> outputs)
	+{abstract} boolean getResult(int outputIndex)
	+{abstract} void setResults()
}

class Circuit{
	-LinkedList<CircuitComponent> components
	-LinkedList<Output> inputs
	+Circuit()
	+Circuit(LinkedList<CircuitComponent> components, LinkedList<Output> inputs)
	+void setInputs(LinkedList<Output> inputs)
	+LinkedList<CircuitComponent> getComponents()
	+LinkedList<Output> getInputs()
	+void setComponents(LinkedList<CircuitComponent> components)
}

class Output{
	-boolean data
	+Output(CircuitComponent attachedTo)
	+void setData(boolean data)
	+boolean getData()
	+CircuitComponent getAttachedTo()
	+void setAttachedTo(CircuitComponent attachedTo)
}
class Input{
	-boolean data
	+void update(Observable o, Object arg)
	+Input(CircuitComponent attachedTo)
	+void setData(boolean data)
	+boolean getData()
	+CircuitComponent getAttachedTo()
	+void setAttachedTo(CircuitComponent attachedTo)
}
CircuitComponent ..* Input : attachedTo
CircuitComponent ..* Output : attachedTo
interface Observer{
	
}
CircuitComponent --* Circuit
Input ..|> Pin
Input ..|> Observer
Output ..|> Pin
Output --|> Observable
@enduml